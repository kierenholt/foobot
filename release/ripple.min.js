function isNumeric(n){return!isNaN(parseFloat(n))&&isFinite(n)}var removeFromArray=function(array,item){for(let i=array.length;i>=0;i--)array[i]==item&&array.splice(i,1)};function objectSome(obj,func){for(var key in obj)if(func(obj[key]))return!0;return!1}class DraggableComponent extends Phaser.GameObjects.Container{constructor(scene,x,y,children,hitShape,containsCallback,hasPermanentStroke){super(scene,x,y,children),this.scene=scene,scene.add.existing(this),this.initInteractive(hitShape,containsCallback),this.children=children,this.hitShape=hitShape,this.hasPermanentStroke=hasPermanentStroke,this.onDragHasFired=!1,this.firstDragEndHasFired=!1,this.isDragging=!1,this.children.filter(ch=>ch instanceof HoverText).forEach(g=>g.visible=!1),this.children.filter(ch=>ch instanceof HoverText).forEach(g=>g.extraPointerOver=this.pointerOver.bind(this))}initInteractive(hitShape,containsCallback){this.setInteractive(hitShape,containsCallback),this.scene.input.setDraggable(this),this.on("drag",this.onDrag),this.on("dragend",this.dragEnd),this.on("destroy",this.onDestroy),this.on("pointerover",this.pointerOver),this.on("pointerout",this.pointerOut)}onDrag(pointer,dragX,dragY){this.isDragging=!0,this.onDragHasFired||(this.clone(),this.onFirstDragStart(),this.onDragHasFired=!0),this.firstDragEndHasFired?(this.x=5*Math.floor(dragX/5)+2,this.y=5*Math.floor(dragY/5)+2):(this.x=5*Math.floor((dragX-.5*this.hitShape.width)/5)+2,this.y=5*Math.floor((dragY-.5*this.hitShape.height)/5)+2),this.update()}dragEnd(pointer,dragX,dragY){this.isDragging=!1,this.firstDragEndHasFired=!0,(this.x<RippleTank.LEFT_PADDING||this.x>RippleTank.LEFT_PADDING+RippleTank.instance.canvasElement.width)&&(console.log("destroy"),this.destroy()),this.update()}pointerOut(pointer){this.hasPermanentStroke?this.input.hitArea.setStrokeStyle(1,Phaser.Display.Color.GetColor(0,0,0)):this.input.hitArea.setStrokeStyle(),this.children.filter(ch=>ch instanceof HoverText).forEach(g=>g.visible=!1)}pointerOver(pointer){this.input.hitArea.setStrokeStyle(1,Phaser.Display.Color.GetColor(255,0,0)),this.firstDragEndHasFired&&this.children.filter(ch=>ch instanceof HoverText).forEach(g=>g.visible=!0)}}DraggableComponent.ABSORBER_COLOUR=8947848,DraggableComponent.OSCILLATOR_COLOUR=13421772;class Glass extends DraggableComponent{constructor(scene,x,y){let ntext=new ValueText(scene,0,0,"n"),widthText=new ValueText(scene,0,HoverText.LINE_HEIGHT,"width"),heightText=new ValueText(scene,0,2*HoverText.LINE_HEIGHT,"height"),angleText=new ValueText(scene,0,3*HoverText.LINE_HEIGHT,"angle"),rect=new Phaser.GameObjects.Rectangle(scene,0,0,0,0,16777215,0).setStrokeStyle(1,Glass.BORDER_COLOUR);var comp;super(scene,x,y,[rect,ntext,widthText,heightText,angleText],rect,Phaser.Geom.Rectangle.Contains,!0),this.scene.refractors.push(this),this.hitRect=rect,this.hitRect.width=Glass.START_WIDTH,this.hitRect.height=Glass.START_HEIGHT,this.widthText=widthText,this.heightText=heightText,this.n=Glass.START_N,ntext.valueSetter=(comp=comp=this,value=>{value<1&&(value=1),comp.n=value,comp.update()}),ntext.valueGetter=function(comp){var comp=comp;return()=>comp.n}(this),angleText.valueSetter=function(comp){var comp=comp;return value=>{comp.angle=value,comp.update()}}(this),angleText.valueGetter=function(comp){var comp=comp;return()=>comp.angle}(this),widthText.valueSetter=function(comp){var comp=comp;return value=>{comp.hitRect.width=value,comp.hitRect.x=0,comp.hitRect.y=0,comp.update()}}(this),widthText.valueGetter=function(comp){var comp=comp;return()=>comp.hitRect.width}(this),heightText.valueSetter=function(comp){var comp=comp;return value=>{comp.hitRect.height=value,comp.hitRect.x=0,comp.hitRect.y=0,comp.update()}}(this),heightText.valueGetter=function(comp){var comp=comp;return()=>comp.hitRect.height}(this)}clone(){return new Glass(this.scene,this.x,this.y)}onFirstDragStart(){this.hitRect.width=Glass.ON_DRAG_WIDTH,this.hitRect.height=Glass.ON_DRAG_HEIGHT,this.widthText.updateValueText(),this.heightText.updateValueText()}setPixels(){if(this.firstDragEndHasFired&&!this.isDragging){let x=(this.x-RippleTank.LEFT_PADDING)/RippleTank.scaleFactor,y=this.y/RippleTank.scaleFactor,width=this.hitRect.width/RippleTank.scaleFactor,height=this.hitRect.height/RippleTank.scaleFactor;RippleTank.instance.setNrectangle(x,y,width,height,this.angle,this.n*this.n)}}onDestroy(){removeFromArray(Scene1.instance.refractors,this),Scene1.instance.updateRefractors()}update(){Scene1.instance.updateRefractors()}}Glass.BORDER_COLOUR=8947848,Glass.START_WIDTH=50,Glass.START_HEIGHT=75,Glass.ON_DRAG_WIDTH=200,Glass.ON_DRAG_HEIGHT=300,Glass.START_N=2;class Slit extends DraggableComponent{constructor(scene,x,y){let slitWidthText=new ValueText(scene,Slit.WIDTH,0,"slit width"),fullHeight=2*Slit.START_TOP_HEIGHT+Slit.START_SLIT_WIDTH,hitRect=new Phaser.GameObjects.Rectangle(scene,0,0,0,0,DraggableComponent.ABSORBER_COLOUR,0),topRect=new Phaser.GameObjects.Rectangle(scene,0,0,0,0,DraggableComponent.ABSORBER_COLOUR),bottomRect=new Phaser.GameObjects.Rectangle(scene,0,Slit.START_TOP_HEIGHT+Slit.START_SLIT_WIDTH,0,0,DraggableComponent.ABSORBER_COLOUR);var comp;super(scene,x,y,[topRect,bottomRect,hitRect,slitWidthText],hitRect,Phaser.Geom.Rectangle.Contains,!1),this.scene.absorbers.push(this),this.slitWidthText=slitWidthText,this.hitRect=hitRect,this.hitRect.width=Slit.WIDTH,this.hitRect.height=fullHeight,this.topRect=topRect,this.topRect.width=Slit.WIDTH,this.topRect.height=Slit.START_TOP_HEIGHT,this.bottomRect=bottomRect,this.bottomRect.width=Slit.WIDTH,this.bottomRect.height=Slit.START_TOP_HEIGHT,this.slitWidth=Slit.START_SLIT_WIDTH,slitWidthText.valueSetter=(comp=comp=this,value=>{comp.setSlitWidth(value),comp.update()}),slitWidthText.valueGetter=function(comp){var comp=comp;return()=>comp.slitWidth}(this)}clone(){return new Slit(this.scene,this.x,this.y)}onFirstDragStart(){this.topRect.height=Slit.ON_DRAG_TOP_HEIGHT,this.bottomRect.height=Slit.ON_DRAG_TOP_HEIGHT,this.setSlitWidth(Slit.ON_DRAG_SLIT_WIDTH),this.slitWidthText.y=Slit.ON_DRAG_TOP_HEIGHT}setSlitWidth(w){console.log(w),this.hitRect.height=2*Slit.ON_DRAG_TOP_HEIGHT+w,this.bottomRect.y=Slit.ON_DRAG_TOP_HEIGHT+w,this.slitWidth=w,this.slitWidthText.updateValueText()}setPixels(){if(this.firstDragEndHasFired&&!this.isDragging){let x=(this.x-RippleTank.LEFT_PADDING)/RippleTank.scaleFactor+1,y0=this.y/RippleTank.scaleFactor,y1=(this.y+Slit.ON_DRAG_TOP_HEIGHT)/RippleTank.scaleFactor,y2=(this.y+Slit.ON_DRAG_TOP_HEIGHT+this.slitWidth)/RippleTank.scaleFactor,y3=(this.y+2*Slit.ON_DRAG_TOP_HEIGHT+this.slitWidth)/RippleTank.scaleFactor;RippleTank.instance.setLineAbsorber(x,y0,y1),RippleTank.instance.setLineAbsorber(x,y2,y3)}}onDestroy(){removeFromArray(Scene1.instance.absorbers,this),Scene1.instance.updateAbsorbers()}update(){Scene1.instance.updateAbsorbers()}}Slit.WIDTH=10,Slit.START_TOP_HEIGHT=45,Slit.START_SLIT_WIDTH=10,Slit.ON_DRAG_SLIT_WIDTH=25,Slit.ON_DRAG_TOP_HEIGHT=1e3;class DoubleSlit extends DraggableComponent{constructor(scene,x,y){let slitWidthText=new ValueText(scene,DoubleSlit.WIDTH,0,"slit width"),slitSeparationText=new ValueText(scene,DoubleSlit.WIDTH,HoverText.LINE_HEIGHT,"slit sep."),fullHeight=2*DoubleSlit.START_TOP_HEIGHT+2*DoubleSlit.START_SLIT_WIDTH+DoubleSlit.START_SLIT_SEPARATION,hitRect=new Phaser.GameObjects.Rectangle(scene,0,0,0,0,DraggableComponent.ABSORBER_COLOUR,0),topRect=new Phaser.GameObjects.Rectangle(scene,0,0,0,0,DraggableComponent.ABSORBER_COLOUR),middleRect=new Phaser.GameObjects.Rectangle(scene,0,DoubleSlit.START_TOP_HEIGHT+DoubleSlit.START_SLIT_WIDTH,0,0,DraggableComponent.ABSORBER_COLOUR),bottomRect=new Phaser.GameObjects.Rectangle(scene,0,DoubleSlit.START_TOP_HEIGHT+2*DoubleSlit.START_SLIT_WIDTH+DoubleSlit.START_SLIT_SEPARATION,0,0,DraggableComponent.ABSORBER_COLOUR);var comp;super(scene,x,y,[topRect,bottomRect,hitRect,slitWidthText,middleRect,slitSeparationText],hitRect,Phaser.Geom.Rectangle.Contains,!1),this.scene.absorbers.push(this),this.slitWidthText=slitWidthText,this.slitSeparationText=slitSeparationText,this.hitRect=hitRect,this.hitRect.width=DoubleSlit.WIDTH,this.hitRect.height=fullHeight,this.topRect=topRect,this.topRect.width=DoubleSlit.WIDTH,this.topRect.height=DoubleSlit.START_TOP_HEIGHT,this.middleRect=middleRect,this.middleRect.width=DoubleSlit.WIDTH,this.middleRect.height=DoubleSlit.START_SLIT_SEPARATION,this.bottomRect=bottomRect,this.bottomRect.width=DoubleSlit.WIDTH,this.bottomRect.height=DoubleSlit.START_TOP_HEIGHT,this.slitWidth=DoubleSlit.START_SLIT_WIDTH,this.slitSeparation=DoubleSlit.START_SLIT_SEPARATION,slitWidthText.valueSetter=(comp=comp=this,value=>{comp.setSlitWidth(value),comp.update()}),slitWidthText.valueGetter=function(comp){var comp=comp;return()=>comp.slitWidth}(this),slitSeparationText.valueSetter=function(comp){var comp=comp;return value=>{comp.setSlitSeparation(value),comp.update()}}(this),slitSeparationText.valueGetter=function(comp){var comp=comp;return()=>comp.slitSeparation}(this)}clone(){return new DoubleSlit(this.scene,this.x,this.y)}onFirstDragStart(){this.topRect.height=DoubleSlit.ON_DRAG_TOP_HEIGHT,this.bottomRect.height=DoubleSlit.ON_DRAG_TOP_HEIGHT,this.setSlitWidth(DoubleSlit.ON_DRAG_SLIT_WIDTH),this.setSlitSeparation(DoubleSlit.ON_DRAG_SLIT_SEPARATION),this.slitWidthText.y=DoubleSlit.ON_DRAG_TOP_HEIGHT,this.slitSeparationText.y=DoubleSlit.ON_DRAG_TOP_HEIGHT+HoverText.LINE_HEIGHT}setSlitWidth(w){console.log(w),this.hitRect.height=2*DoubleSlit.ON_DRAG_TOP_HEIGHT+2*w+this.slitSeparation,this.middleRect.y=DoubleSlit.ON_DRAG_TOP_HEIGHT+w,this.bottomRect.y=DoubleSlit.ON_DRAG_TOP_HEIGHT+2*w+this.slitSeparation,this.slitWidth=w,this.slitWidthText.updateValueText()}setSlitSeparation(s){this.hitRect.height=2*DoubleSlit.ON_DRAG_TOP_HEIGHT+2*this.slitWidth+s,this.middleRect.height=s,this.bottomRect.y=DoubleSlit.ON_DRAG_TOP_HEIGHT+2*this.slitWidth+s,this.slitSeparation=s,this.slitSeparationText.updateValueText()}setPixels(){if(this.firstDragEndHasFired&&!this.isDragging){let x=(this.x-RippleTank.LEFT_PADDING)/RippleTank.scaleFactor+1,y0=this.y/RippleTank.scaleFactor,y1=(this.y+Slit.ON_DRAG_TOP_HEIGHT)/RippleTank.scaleFactor,y2=(this.y+Slit.ON_DRAG_TOP_HEIGHT+this.slitWidth)/RippleTank.scaleFactor,y3=(this.y+Slit.ON_DRAG_TOP_HEIGHT+this.slitWidth+this.slitSeparation)/RippleTank.scaleFactor,y4=(this.y+Slit.ON_DRAG_TOP_HEIGHT+2*this.slitWidth+this.slitSeparation)/RippleTank.scaleFactor,y5=(this.y+2*Slit.ON_DRAG_TOP_HEIGHT+2*this.slitWidth+this.slitSeparation)/RippleTank.scaleFactor;RippleTank.instance.setLineAbsorber(x,y0,y1),RippleTank.instance.setLineAbsorber(x,y2,y3),RippleTank.instance.setLineAbsorber(x,y4,y5)}}onDestroy(){removeFromArray(Scene1.instance.absorbers,this),Scene1.instance.updateAbsorbers()}update(){Scene1.instance.updateAbsorbers()}}DoubleSlit.WIDTH=10,DoubleSlit.START_TOP_HEIGHT=35,DoubleSlit.START_SLIT_WIDTH=10,DoubleSlit.START_SLIT_SEPARATION=10,DoubleSlit.ON_DRAG_SLIT_WIDTH=15,DoubleSlit.ON_DRAG_SLIT_SEPARATION=60,DoubleSlit.ON_DRAG_TOP_HEIGHT=1e3;class PointOscillator extends DraggableComponent{constructor(scene,x,y){let frequencyText=new ValueText(scene,PointOscillator.START_RADIUS/2,0,"Frequency (Hz)"),activeText=new ButtonText(scene,PointOscillator.START_RADIUS/2,HoverText.LINE_HEIGHT,"ON"),pulseText=new ButtonText(scene,PointOscillator.START_RADIUS/2,2*HoverText.LINE_HEIGHT,"pulse"),circle=new Phaser.GameObjects.Ellipse(scene,0,0,0,0,DraggableComponent.OSCILLATOR_COLOUR);var comp;super(scene,x,y,[circle,frequencyText,activeText,pulseText],circle,Phaser.Geom.Ellipse.Contains,!1),scene.updateFunctions.push(this.updateFrame.bind(this)),this.scene.absorbers.push(this),this.circle=circle,this.circle.height=PointOscillator.START_RADIUS,this.circle.width=PointOscillator.START_RADIUS,this.animCounter=0,this.active=!0,this.activeText=activeText,this.pulseText=pulseText,frequencyText.valueSetter=(comp=comp=this,value=>{RippleTank.instance.setFrequency(value)}),frequencyText.valueGetter=function(comp){var comp=comp;return()=>RippleTank.instance.getFrequency()}(this),activeText.onClick=function(comp){var comp=comp;return()=>{comp.toggleActive()}}(this),pulseText.onClick=function(comp){var comp=comp;return()=>{comp.pulse()}}(this)}pulse(){let x=(this.x-RippleTank.LEFT_PADDING)/RippleTank.scaleFactor,y=this.y/RippleTank.scaleFactor;RippleTank.instance.disturbBall(x,y)}clone(){return new PointOscillator(this.scene,this.x,this.y)}onFirstDragStart(){}updateFrame(){this.active&&(this.animCounter%PointOscillator.OSCILLATE_FRAMES==0&&this.circle.setSize(PointOscillator.START_RADIUS,PointOscillator.START_RADIUS),this.animCounter%PointOscillator.OSCILLATE_FRAMES==PointOscillator.OSCILLATE_FRAMES/2&&this.circle.setSize(PointOscillator.START_RADIUS+2,PointOscillator.START_RADIUS+2),this.animCounter++)}toggleActive(){this.active=!this.active,this.activeText.setText(this.active?"ON":"OFF"),this.update()}setPixels(){if(this.firstDragEndHasFired&&this.active&&!this.isDragging){let x=(this.x-RippleTank.LEFT_PADDING)/RippleTank.scaleFactor,y=this.y/RippleTank.scaleFactor;console.log(x,y),RippleTank.instance.setPointOscillator(x,y)}}onDestroy(){removeFromArray(Scene1.instance.absorbers,this),Scene1.instance.updateAbsorbers()}update(){Scene1.instance.updateAbsorbers()}}PointOscillator.START_RADIUS=25,PointOscillator.OSCILLATE_FRAMES=10;class LineOscillator extends DraggableComponent{constructor(scene,x,y){let frequencyText=new ValueText(scene,LineOscillator.START_WIDTH,0,"Frequency"),activeText=new ButtonText(scene,LineOscillator.START_WIDTH,HoverText.LINE_HEIGHT,"ON"),pulseText=new ButtonText(scene,LineOscillator.START_WIDTH,2*HoverText.LINE_HEIGHT,"pulse"),hitRect=new Phaser.GameObjects.Rectangle(scene,0,0,0,0,DraggableComponent.OSCILLATOR_COLOUR);var comp;super(scene,x,y,[hitRect,frequencyText,activeText,pulseText],hitRect,Phaser.Geom.Rectangle.Contains,!1),scene.updateFunctions.push(this.updateFrame.bind(this)),this.scene.absorbers.push(this),this.hitRect=hitRect,this.hitRect.width=LineOscillator.START_WIDTH,this.hitRect.height=LineOscillator.START_HEIGHT,this.phaseText=frequencyText,this.activeText=activeText,this.pulseText=pulseText,this.animCounter=0,this.active=!0,frequencyText.valueSetter=(comp=comp=this,value=>{RippleTank.instance.setFrequency(value)}),frequencyText.valueGetter=function(comp){var comp=comp;return()=>RippleTank.instance.getFrequency()}(this),activeText.onClick=function(comp){var comp=comp;return()=>{comp.toggleActive()}}(this),pulseText.onClick=function(comp){var comp=comp;return()=>{comp.pulse()}}(this)}toggleActive(){this.active=!this.active,this.activeText.setText(this.active?"ON":"OFF"),this.update()}pulse(){let x=(this.x-RippleTank.LEFT_PADDING+LineOscillator.START_WIDTH/2)/RippleTank.scaleFactor;RippleTank.instance.disturbLine(x)}clone(){return new LineOscillator(this.scene,this.x,this.y)}onFirstDragStart(){this.hitRect.height=LineOscillator.ON_DRAG_HEIGHT,this.hitRect.y=0,this.phaseText.y=LineOscillator.ON_DRAG_HEIGHT/2,this.activeText.y=LineOscillator.ON_DRAG_HEIGHT/2+HoverText.LINE_HEIGHT,this.pulseText.y=LineOscillator.ON_DRAG_HEIGHT/2+2*HoverText.LINE_HEIGHT}updateFrame(){this.active&&(this.animCounter%LineOscillator.OSCILLATE_FRAMES==0&&(this.hitRect.width=LineOscillator.START_WIDTH),this.animCounter%LineOscillator.OSCILLATE_FRAMES==LineOscillator.OSCILLATE_FRAMES/2&&(this.hitRect.width=LineOscillator.START_WIDTH+2),this.animCounter++)}setPixels(){if(this.firstDragEndHasFired&&this.active&&!this.isDragging){let x=(this.x-RippleTank.LEFT_PADDING+LineOscillator.START_WIDTH/2)/RippleTank.scaleFactor;RippleTank.instance.setLineOscillator(x)}}onDestroy(){removeFromArray(Scene1.instance.absorbers,this),Scene1.instance.updateAbsorbers()}update(){Scene1.instance.updateAbsorbers()}}LineOscillator.START_HEIGHT=50,LineOscillator.START_WIDTH=10,LineOscillator.ON_DRAG_HEIGHT=1e3,LineOscillator.OSCILLATE_FRAMES=10;class myGame extends Phaser.Game{constructor(){let config;super({type:Phaser.CANVAS,width:RippleTank.instance.imageWidth+RippleTank.LEFT_PADDING,height:RippleTank.instance.imageHeight,autoFocus:!0,transparent:!0,parent:"gameDiv",url:"",title:"Blue Ripple tank",version:"0.0.1",scene:[new Scene1],canvas:document.getElementById("objects")})}}class HoverText extends Phaser.GameObjects.Text{constructor(scene,x,y,parameterName){super(scene,x,y,parameterName,HoverText.TEXTSTYLE),HoverText.instances.push(this),this.scene.add.existing(this),this.scene=scene,this.setInteractive(),this.setDepth(100),this.setFontSize(HoverText.FONT_SIZE),this.on("pointerover",this.pointerOver),this.on("pointerout",this.pointerOut),this.on("destroy",()=>{this.hoverRect&&this.hoverRect.destroy(),removeFromArray(HoverText.instances,this)})}static setFontSize(value){console.log(value),HoverText.FONT_SIZE=Number(value),HoverText.instances.forEach(t=>t.setFontSize(HoverText.FONT_SIZE))}static get TEXTSTYLE(){return{fill:HoverText.TEXT_COLOUR,fontFamily:"sans-serif"}}pointerOut(pointer){this.hoverRect&&(this.hoverRect.destroy(),this.hoverRect=void 0)}pointerOver(pointer){if(this&&!this.hoverRect){var bounds=this.getBounds();this.hoverRect=this.scene.add.rectangle(bounds.centerX,bounds.centerY,bounds.width,bounds.height).setStrokeStyle(1,Phaser.Display.Color.GetColor(255,0,0)).setRotation(this.rotation)}this.extraPointerOver&&this.extraPointerOver()}}HoverText.LINE_HEIGHT=30,HoverText.instances=[],HoverText.TEXT_COLOUR="#fff",HoverText.FONT_SIZE=12;class ValueText extends HoverText{constructor(scene,x,y,parameterName){super(scene,x,y,parameterName+":"),this.parameterName=parameterName,this.on("pointerdown",pointer=>{this.onClick()})}set valueGetter(func){this._valueGetter=func,this.text=this.parameterName+":"+this._valueGetter()}set valueSetter(func){this._valueSetter=func}onClick(){var value=window.prompt("set value for "+this.parameterName,this._valueGetter().toString());isNumeric(value)&&(this._valueSetter(Number(value)),this.updateValueText())}updateValueText(){this.text=this.parameterName+":"+this._valueGetter()}}class ButtonText extends HoverText{constructor(scene,x,y,parameterName){super(scene,x,y,parameterName),this.parameterName=parameterName,this.on("pointerdown",pointer=>{this.pointerDown()})}pointerDown(){this._onClick&&this._onClick()}set onClick(value){this._onClick=value}}class RippleTank{constructor(canvasElement,wasmModule){this.playing=!1,RippleTank.instance=this,this.wasmModule=wasmModule,this.canvasElement=canvasElement,RippleTank.GRID_WIDTH=Math.floor(window.innerWidth-RippleTank.LEFT_PADDING-RippleTank.RIGHT_PADDING)/RippleTank.scaleFactor,RippleTank.GRID_HEIGHT=Math.floor(window.innerHeight/RippleTank.scaleFactor),this.wasmModule.instance.exports.init(RippleTank.GRID_WIDTH,RippleTank.GRID_HEIGHT),this.canvasElement.width=RippleTank.scaleFactor*RippleTank.GRID_WIDTH,this.canvasElement.height=RippleTank.scaleFactor*RippleTank.GRID_HEIGHT,this.canvasContext=canvasElement.getContext("2d"),this.canvasContext.scale(RippleTank.scaleFactor,RippleTank.scaleFactor),RippleTank.DEBUG||this.play()}get imageWidth(){return this.canvasElement.width}get imageHeight(){return this.canvasElement.height}getImageArray(){let memory=this.wasmModule.instance.exports.memory;const wasmByteMemoryArray=new Uint8Array(memory.buffer);let start=this.wasmModule.instance.exports.RIPPLE_IMAGE_MEM_START.valueOf();return wasmByteMemoryArray.slice(start,start+this.wasmModule.instance.exports.RIPPLE_IMAGE_MEM_SIZE.valueOf())}copyMemoryToCanvas(){var imageDataArray=this.getImageArray();this.canvasContext.clearRect(0,0,this.canvasElement.width,this.canvasElement.height);const canvasImageData=this.canvasContext.createImageData(RippleTank.GRID_WIDTH,RippleTank.GRID_HEIGHT);canvasImageData.data.set(imageDataArray),this.canvasContext.putImageData(canvasImageData,0,0),this.canvasContext.drawImage(this.canvasElement,0,0)}timeStep(){this.wasmModule.instance.exports.timeStep(),this.copyMemoryToCanvas()}play(){this.playing||(this.playing=!0,this.timer=setInterval(this.timeStep.bind(this),1e3/this.wasmModule.instance.exports.FRAMES_PER_SECOND.valueOf()))}stop(){this.playing=!1,this.timer&&clearInterval(this.timer)}disturbLine(x){let amplitude=5,radius=10;this.wasmModule.instance.exports.disturbLine(Math.round(x),10,5),RippleTank.DEBUG&&this.copyMemoryToCanvas()}disturbBall(x,y){let amplitude=5,radius=10;this.wasmModule.instance.exports.disturbBall(Math.round(x),Math.round(y),10,5),RippleTank.DEBUG&&this.copyMemoryToCanvas()}setPointOscillator(x,y){this.wasmModule.instance.exports.setPointOscillator(Math.round(x),Math.round(y)),RippleTank.DEBUG&&this.copyMemoryToCanvas()}setLineOscillator(x){this.wasmModule.instance.exports.setLineOscillator(x),RippleTank.DEBUG&&this.copyMemoryToCanvas()}setLineAbsorber(x,y1,y2){this.wasmModule.instance.exports.setLineAbsorber(Math.round(x),Math.round(y1),Math.round(y2)),RippleTank.DEBUG&&this.copyMemoryToCanvas()}setNrectangle(x,y,width,height,angle,nsquared){this.wasmModule.instance.exports.setNrectangle(Math.round(x),Math.round(y),width,height,angle,nsquared),RippleTank.DEBUG&&this.copyMemoryToCanvas()}resetAbsorbers(){this.wasmModule.instance.exports.resetAbsorbers()}resetNSquared(){this.wasmModule.instance.exports.resetNSquared()}setFrequency(value){value>10&&(value=10),this.wasmModule.instance.exports.setFrequency(value)}setSpeed(value){this.wasmModule.instance.exports.setSpeed(value)}setFriction(value){this.wasmModule.instance.exports.setFriction(value)}setHardBoundary(value){this.wasmModule.instance.exports.setHardBoundary(value)}setHighContrast(value){this.wasmModule.instance.exports.setHighContrast(value)}setMaxAmplitude(value){this.wasmModule.instance.exports.setMaxAmplitude(value)}setColour(value){this.wasmModule.instance.exports.setColour(value)}getSpeed(){return this.wasmModule.instance.exports.SPEED.valueOf()}getFrequency(){return this.wasmModule.instance.exports.FREQUENCY.valueOf()}getFriction(){return this.wasmModule.instance.exports.FRICTION.valueOf()}getHardBoundary(){return this.wasmModule.instance.exports.HARD_BOUNDARY.valueOf()}getHighContrast(){return this.wasmModule.instance.exports.HIGH_CONTRAST.valueOf()}getMaxAmplitude(){return this.wasmModule.instance.exports.MAX_AMPLITUDE.valueOf()}getColour(){return this.wasmModule.instance.exports.COLOUR.valueOf()}}RippleTank.scaleFactor=5,RippleTank.DEBUG=!1,RippleTank.GRID_WIDTH=80,RippleTank.GRID_HEIGHT=100,RippleTank.LEFT_PADDING=100,RippleTank.RIGHT_PADDING=100;const SPAWN_X=25;var SPAWN_Y=25;const SPAWN_VERTICAL_SPACING=50;class Scene1 extends Phaser.Scene{constructor(){super({key:"sceneA",active:!0,physics:{default:"arcade",arcade:{debug:!1}}}),this.refractors=[],this.absorbers=[],this.updateFunctions=[],Scene1.instance=this}preload(){}create(){this.tankRectangle=new Phaser.GameObjects.Rectangle(this,RippleTank.LEFT_PADDING+RippleTank.instance.imageWidth/2,RippleTank.instance.imageHeight/2,RippleTank.instance.imageWidth,RippleTank.instance.imageHeight).setStrokeStyle(1,0),this.add.existing(this.tankRectangle),new Glass(this,22,24),new PointOscillator(this,22,150),new LineOscillator(this,70,125),new Slit(this,22,200),new DoubleSlit(this,70,200)}update(){this.updateFunctions.forEach(f=>f())}updateRefractors(){RippleTank.instance.resetNSquared(),this.refractors.forEach(r=>r.setPixels())}updateAbsorbers(){RippleTank.instance.resetAbsorbers(),this.absorbers.forEach(r=>r.setPixels())}}var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};function wasmBrowserInstantiate(wasmModuleUrl,importObject){return __awaiter(this,void 0,void 0,(function*(){let response=void 0;importObject||(importObject={env:{abort:()=>console.log("Abort!")}});const fetchAndInstantiateTask=()=>__awaiter(this,void 0,void 0,(function*(){const wasmArrayBuffer=yield fetch(wasmModuleUrl).then(response=>response.arrayBuffer());return WebAssembly.instantiate(wasmArrayBuffer,importObject)}));return response=yield fetchAndInstantiateTask(),response}))}